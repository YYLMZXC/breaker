# 定义一个包含多行字符串的列表，这些字符串表示游戏关卡的初始布局
back = [
    "99999999999999999999\n",  # 顶部边界
    "90000000000000000009\n",  # 空行
    "90000000000000000009\n",  # 空行
    "90000000000000000009\n",  # 空行
    "90000000000000000009\n",  # 空行
    "90000000000000000009\n",  # 空行
    "90000000000000000009\n",  # 空行
    "90000000000000000009\n",  # 空行
    "90000000000000000009\n",  # 空行
    "90000000000000000009\n",  # 空行
    "90000000000000000009\n",  # 空行
    "90000000000000000009\n",  # 空行
    "90000000000000000009\n",  # 空行
    "90000000000000000009\n",  # 空行
    "90000000000000000009\n"   # 底部边界
]

# 定义一个类，表示方块的类型
class BlockType:
    # 空方块
    NULL = 0
    # 加速方块
    SPEED_UP = 1
    # 普通方块
    NORMAL = 2
    # 复制方块
    COPY = 3
    # 减速方块
    SPEED_DOWN = 6
    # 墙壁方块
    WALL = 9

# 定义一个列表，表示每种方块类型的生成概率
BLOCK_TYPE_VALUE = [
    1500,    # 加速方块的生成概率
    10,      # 普通方块的生成概率
    100,     # 复制方块的生成概率
    10,      # 减速方块的生成概率
    100,     # 墙壁方块的生成概率
    100,     # 空方块的生成概率
    10,      # 其他方块的生成概率
    100,     # 其他方块的生成概率
    0,       # 其他方块的生成概率
    0,       # 其他方块的生成概率
]

# 计算所有方块类型的生成概率之和
maxValue = 0
for x in BLOCK_TYPE_VALUE:
    maxValue += x

# 定义一个函数，用于随机生成方块类型
def randomGen():
    # 导入随机数生成模块
    import random
    # 生成一个随机数，范围在0到所有方块类型的生成概率之和之间
    val = random.randint(0, maxValue)
    # 遍历每种方块类型的生成概率
    for i, x in enumerate(BLOCK_TYPE_VALUE):
        # 从随机数中减去当前方块类型的生成概率
        val -= x
        # 如果随机数小于等于0，返回当前方块类型的索引
        if val <= 0:
            return i

# 生成11到99号关卡的布局文件
for x in range(11, 100):
    # 打开一个文件，用于写入关卡布局
    with open('data/level/' + str(x) + ".x", "w") as fp:
        # 写入顶部边界
        fp.write("99999999999999999999\n")
        # 生成7行随机方块
        for i in range(7):
            row = "9"
            for j in range(18):
                row += str(randomGen())
            row += "9\n"
            fp.write(row)
        # 写入底部边界
        for i in range(8):
            fp.write("90000000000000000009\n")
